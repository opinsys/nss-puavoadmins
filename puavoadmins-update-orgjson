#!/usr/bin/env ruby1.9.1

## Copyright (C) 2014, 2015 Opinsys
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

## Update orgjson safely.
## Exit status:
##   0 - orgjson was already up to date
##   1 - an error occurred, orgjson was not updated
##   2 - an update was available but user canceled
##   3 - orgjson was updated succesfully

## Standard library modules.
require 'fileutils'
require 'set'

## Third-party modules.
require 'highline/import'
require 'puavobs'

## Bundled modules.
require 'puavoadmins-vendor/bundler/setup'
require 'sshkey'

def color(str, color_code)
  unless defined?($has_colors) then
    $has_colors = false
    begin
      $has_colors = IO.popen(['tput', 'colors']) do |io|
        Integer(io.read()) >= 8
      end
    rescue
      ## Just hide all errors, we do not care if color output support
      ## could not be tested properly. Colors are just eye-candies,
      ## nothing more.
    end
  end

  return "\e[#{color_code}m#{str}\e[0m" if $has_colors
  str
end

def color_red(str)
  color(str, 31)
end

def color_green(str)
  color(str, 32)
end

def owner_to_admin(owner)
  ssh_public_key = owner['ssh_public_key']
  ssh_public_key_fingerprint = nil
  if SSHKey.valid_ssh_public_key? ssh_public_key
    ssh_public_key_fingerprint = SSHKey.fingerprint ssh_public_key
  end
  {
    :ssh_public_key_fingerprint => ssh_public_key_fingerprint,
    :uid                        => owner['uid_number'],
    :username                   => owner['username'],
  }
end

org_json_filepath = '/etc/puavo/org.json'

new_org_json = PuavoBS.get_org_json()

new_org_json_filepath = "#{org_json_filepath}.new"

begin
  File.open(new_org_json_filepath, 'w') do |new_org_json_file|
    new_org_json_file.write(new_org_json.to_json())
  end
  FileUtils.chown('root', 'root', new_org_json_filepath)
  File.chmod(0644, new_org_json_filepath)

  system('/usr/lib/puavoadmins-validate-orgjson', new_org_json_filepath)
  if !$?.success? then
    exit(1)
  end

  old_admins = {}
  if File.exists?(org_json_filepath) then
    system('/usr/lib/puavoadmins-validate-orgjson', org_json_filepath)
    if !$?.success? then
      exit(1)
    end
    org_json = JSON.parse(File.read(org_json_filepath))

    org_json['owners'].each do |owner|
      admin = owner_to_admin(owner)
      username = admin[:username]
      old_admins[username] = admin
    end
  end

  new_admins = {}
  new_org_json['owners'].each do |owner|
    admin = owner_to_admin(owner)
    username = admin[:username]
    new_admins[username] = admin
  end

  old_usernames = Set.new(old_admins.keys)
  new_usernames = Set.new(new_admins.keys)
  dels, news, olds = [old_usernames - new_usernames,
                      new_usernames - old_usernames,
                      old_usernames & new_usernames]

  has_changes = false

  if !dels.empty?
    has_changes = true
    puts "Removed Puavo administrators:"
    dels.each do |username|
      puts color_red "  #{username}"
    end
    puts
  end

  if !news.empty?
    has_changes = true
    puts "New Puavo administrators:"
    new_admins.each_value do |admin|
      next unless news.include? admin[:username]
      puts color_green "  #{admin[:username]}"
      puts color_green "    uid                 : #{admin[:uid]}"
      puts color_green "    SSH key fingerprint : #{admin[:ssh_public_key_fingerprint]}"
      puts
    end
  end

  if !olds.empty?
    mods = olds.select { |u| old_admins[u] != new_admins[u] }
    if !mods.empty?
      has_changes = true
      puts "Updated Puavo administrators:"
      mods.each do |username|
        puts "  #{username}"
        old_admin = old_admins[username]
        new_admin = new_admins[username]

        old_uid = old_admin[:uid]
        new_uid = new_admin[:uid]
        if old_uid != new_uid
          puts "    uid                 < #{color_red(old_uid)}"
          puts "                        > #{color_green(new_uid)}"
        end

        old_ssh = old_admin[:ssh_public_key_fingerprint]
        new_ssh = new_admin[:ssh_public_key_fingerprint]
        if old_ssh != new_ssh
          puts "    SSH key fingerprint < #{color_red(old_ssh)}"
          puts "                        > #{color_green(new_ssh)}"
        end
        puts
      end
    end
  end

  exit(0) if !has_changes
  exit(2) unless agree('Accept these changes? [yes/no] ')

  if !File.new('/run/puavoadmins.lock', 'w').flock(File::LOCK_EX) then
    STDERR.puts('ERROR: failed to obtain write lock')
    STDERR.puts('ERROR: perhaps puavoadmins-update-orgjson is already running?')
    exit(1)
  end
  File.rename(new_org_json_filepath, org_json_filepath)
ensure
  FileUtils.rm_f(new_org_json_filepath)
end

exit(3)
